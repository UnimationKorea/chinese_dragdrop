const { useState, useEffect, useCallback } = React;
const { createElement: h } = React;

// ========================================
// Ï§ëÍµ≠Ïñ¥ ÏÑ±Ï°∞ ÎìúÎûòÍ∑∏ Ïï°Ìã∞ÎπÑÌã∞
// ÏôÑÏ†ÑÌûà ÎèÖÎ¶ΩÏ†ÅÏù∏ Ïô∏Î∂Ä Ïï°Ìã∞ÎπÑÌã∞
// ========================================

// ÏÑ±Ï°∞ Îç∞Ïù¥ÌÑ∞ Î∞è Ïú†Ìã∏Î¶¨Ìã∞
const TONE_MARKS = {
  1: '¬Ø',  // 1ÏÑ± - ÌèâÏÑ± (high level)
  2: '¬¥',  // 2ÏÑ± - ÏÉÅÏÑ± (rising)
  3: 'Àá',  // 3ÏÑ± - Í±∞ÏÑ± (falling-rising)
  4: '`',  // 4ÏÑ± - Í±∞ÏÑ± (falling)
  0: ''   // Í≤ΩÏÑ± (neutral)
};

const TONE_NAMES = {
  1: '1ÏÑ± (ÌèâÏÑ±)',
  2: '2ÏÑ± (ÏÉÅÏÑ±)', 
  3: '3ÏÑ± (Í±∞ÏÑ±)',
  4: '4ÏÑ± (Í±∞ÏÑ±)',
  0: 'Í≤ΩÏÑ±'
};

const TONE_COLORS = {
  1: 'bg-red-500',
  2: 'bg-orange-500',
  3: 'bg-green-500', 
  4: 'bg-blue-500',
  0: 'bg-gray-500'
};

// ÌôúÎèô Îç∞Ïù¥ÌÑ∞
const toneActivities = [
  {
    id: "basic-greetings",
    title: "Ïù∏ÏÇ¨ ÌëúÌòÑ", 
    description: "Í∏∞Î≥∏ Ïù∏ÏÇ¨ÎßêÏùò ÏÑ±Ï°∞Î•º Î∞∞ÏπòÌï¥Î≥¥ÏÑ∏Ïöî",
    sentence: {
      chinese: "‰Ω†Â•ΩÂêóÔºü",
      pinyin: ["n«ê", "h«éo", "ma"],
      meaning: "ÏïàÎÖïÌïòÏÑ∏Ïöî?",
      characters: [
        { id: "char_1", char: "‰Ω†", pinyin: "n«ê", tone: 3, position: 0 },
        { id: "char_2", char: "Â•Ω", pinyin: "h«éo", tone: 3, position: 1 },
        { id: "char_3", char: "Âêó", pinyin: "ma", tone: 0, position: 2 }
      ]
    },
    settings: {
      fontSize: 52,
      pinyinFontSize: 26,
      spacing: 25,
      timeLimit: 180,
      showMeaning: true
    }
  },
  {
    id: "numbers",
    title: "Ïà´Ïûê ÌëúÌòÑ",
    description: "Ï§ëÍµ≠Ïñ¥ Ïà´ÏûêÏùò ÏÑ±Ï°∞Î•º Î∞∞ÏπòÌï¥Î≥¥ÏÑ∏Ïöî", 
    sentence: {
      chinese: "‰∏Ä‰∫å‰∏âÂõõ",
      pinyin: ["yƒ´", "√®r", "sƒÅn", "s√¨"],
      meaning: "ÏùºÏù¥ÏÇºÏÇ¨",
      characters: [
        { id: "char_4", char: "‰∏Ä", pinyin: "yƒ´", tone: 1, position: 0 },
        { id: "char_5", char: "‰∫å", pinyin: "√®r", tone: 4, position: 1 },
        { id: "char_6", char: "‰∏â", pinyin: "sƒÅn", tone: 1, position: 2 },
        { id: "char_7", char: "Âõõ", pinyin: "s√¨", tone: 4, position: 3 }
      ]
    },
    settings: {
      fontSize: 48,
      pinyinFontSize: 24, 
      spacing: 20,
      timeLimit: 120,
      showMeaning: true
    }
  },
  {
    id: "family",
    title: "Í∞ÄÏ°± Ìò∏Ïπ≠",
    description: "Í∞ÄÏ°± Í¥ÄÎ†® Îã®Ïñ¥Ïùò ÏÑ±Ï°∞Î•º Î∞∞ÏπòÌï¥Î≥¥ÏÑ∏Ïöî",
    sentence: {
      chinese: "Áà∏Áà∏Â¶àÂ¶à",
      pinyin: ["b√†", "ba", "mƒÅ", "ma"],
      meaning: "ÏïÑÎ≤ÑÏßÄ Ïñ¥Î®∏Îãà",
      characters: [
        { id: "char_8", char: "Áà∏", pinyin: "b√†", tone: 4, position: 0 },
        { id: "char_9", char: "Áà∏", pinyin: "ba", tone: 0, position: 1 },
        { id: "char_10", char: "Â¶à", pinyin: "mƒÅ", tone: 1, position: 2 },
        { id: "char_11", char: "Â¶à", pinyin: "ma", tone: 0, position: 3 }
      ]
    },
    settings: {
      fontSize: 50,
      pinyinFontSize: 25,
      spacing: 22,
      timeLimit: 150,
      showMeaning: true
    }
  }
];

// Î©îÏù∏ Ïï± Ïª¥Ìè¨ÎÑåÌä∏
function ToneActivity() {
  const [currentView, setCurrentView] = useState('activity-selector'); // 'activity-selector' | 'activity' | 'results'
  const [selectedActivityId, setSelectedActivityId] = useState(null);
  const [activityData, setActivityData] = useState(null);

  const selectActivity = useCallback((activityId) => {
    const activity = toneActivities.find(a => a.id === activityId);
    if (activity) {
      setActivityData(activity);
      setSelectedActivityId(activityId);
      setCurrentView('activity');
    }
  }, []);

  const backToSelector = useCallback(() => {
    setCurrentView('activity-selector');
    setSelectedActivityId(null);
    setActivityData(null);
  }, []);

  const showResults = useCallback((results) => {
    setCurrentView('results');
  }, []);

  switch (currentView) {
    case 'activity-selector':
      return h(ToneActivitySelector, { 
        activities: toneActivities,
        onSelectActivity: selectActivity
      });
    
    case 'activity': 
      return h(ToneGameActivity, {
        activityData,
        onBack: backToSelector,
        onComplete: showResults
      });
      
    case 'results':
      return h(ToneActivityResults, {
        onStartNew: backToSelector
      });
    
    default:
      return h('div', { className: 'text-center p-8' }, 'Ïïå Ïàò ÏóÜÎäî ÌôîÎ©¥ÏûÖÎãàÎã§.');
  }
}

// ÌôúÎèô ÏÑ†ÌÉù Ïª¥Ìè¨ÎÑåÌä∏
function ToneActivitySelector({ activities, onSelectActivity }) {
  return h('div', { className: 'max-w-6xl mx-auto p-6' },
    h('div', { className: 'text-center mb-8' },
      h('h1', { 
        className: 'text-4xl font-bold text-gray-800 mb-4 chinese-character'
      }, 'üéµ Ï§ëÍµ≠Ïñ¥ ÏÑ±Ï°∞ ÌïôÏäµ'),
      h('p', { className: 'text-xl text-gray-600' },
        'Ï§ëÍµ≠Ïñ¥ Í∏ÄÏûê ÏúÑÏóê Ïò¨Î∞îÎ•∏ ÏÑ±Ï°∞Î•º ÎìúÎûòÍ∑∏ÌïòÏó¨ Î∞∞ÏπòÌïòÏÑ∏Ïöî'
      ),
      h('div', { className: 'mt-6 p-4 bg-blue-50 rounded-lg border border-blue-200' },
        h('div', { className: 'flex justify-center items-center gap-6 flex-wrap' },
          h('div', { className: 'flex items-center gap-2' },
            h('span', { className: 'w-4 h-4 bg-red-500 rounded' }),
            h('span', { className: 'text-sm font-medium' }, '1ÏÑ± (¬Ø)')
          ),
          h('div', { className: 'flex items-center gap-2' },
            h('span', { className: 'w-4 h-4 bg-orange-500 rounded' }),
            h('span', { className: 'text-sm font-medium' }, '2ÏÑ± (¬¥)')
          ),
          h('div', { className: 'flex items-center gap-2' },
            h('span', { className: 'w-4 h-4 bg-green-500 rounded' }),
            h('span', { className: 'text-sm font-medium' }, '3ÏÑ± (Àá)')
          ),
          h('div', { className: 'flex items-center gap-2' },
            h('span', { className: 'w-4 h-4 bg-blue-500 rounded' }),
            h('span', { className: 'text-sm font-medium' }, '4ÏÑ± (`)')
          ),
          h('div', { className: 'flex items-center gap-2' },
            h('span', { className: 'w-4 h-4 bg-gray-500 rounded' }),
            h('span', { className: 'text-sm font-medium' }, 'Í≤ΩÏÑ±')
          )
        )
      )
    ),
    
    h('div', { className: 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6' },
      ...activities.map(activity =>
        h('div', {
          key: activity.id,
          className: 'bg-white rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 cursor-pointer border border-gray-100',
          onClick: () => onSelectActivity(activity.id)
        },
          h('div', { className: 'p-6' },
            h('div', { className: 'text-center mb-4' },
              h('div', { className: 'chinese-character text-4xl font-bold text-gray-800 mb-2' },
                activity.sentence.chinese
              ),
              h('div', { className: 'text-lg text-blue-600 mb-2' },
                `"${activity.sentence.meaning}"`
              )
            ),
            h('h3', { className: 'text-xl font-bold mb-2 text-gray-800' },
              activity.title
            ),
            h('p', { className: 'text-gray-600 mb-4' },
              activity.description
            ),
            h('div', { className: 'flex justify-between text-sm text-gray-500 mb-4' },
              h('span', null, `${activity.sentence.characters.length}Í∞ú Í∏ÄÏûê`),
              h('span', null, `${Math.floor(activity.settings.timeLimit / 60)}Î∂Ñ`)
            ),
            h('button', {
              className: 'w-full px-4 py-3 bg-gradient-to-r from-purple-500 to-pink-600 text-white font-bold rounded-lg hover:from-purple-600 hover:to-pink-700 transition-all duration-200'
            }, 'üéµ ÏãúÏûëÌïòÍ∏∞')
          )
        )
      )
    )
  );
}

// Î©îÏù∏ Í≤åÏûÑ Ïï°Ìã∞ÎπÑÌã∞
function ToneGameActivity({ activityData, onBack, onComplete }) {
  const [userAnswers, setUserAnswers] = useState({});
  const [feedback, setFeedback] = useState({});
  const [draggedTone, setDraggedTone] = useState(null);
  const [isEditing, setIsEditing] = useState(false);
  const [startTime, setStartTime] = useState(Date.now());
  const [score, setScore] = useState({ correct: 0, total: 0 });

  // ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÏÑ±Ï°∞ ÏòµÏÖò ÏÉùÏÑ± (Ï§ëÎ≥µ Ìè¨Ìï®)
  const availableTones = activityData.sentence.characters.map(char => char.tone);
  
  // ÎìúÎûòÍ∑∏ Ïï§ ÎìúÎ°≠ Ìï∏Îì§Îü¨
  const handleDragStart = useCallback((e, tone) => {
    setDraggedTone(tone);
    e.dataTransfer.effectAllowed = 'move';
  }, []);

  const handleDragEnd = useCallback(() => {
    setDraggedTone(null);
  }, []);

  const handleDragOver = useCallback((e) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
  }, []);

  const handleDrop = useCallback((e, character) => {
    e.preventDefault();
    
    if (draggedTone === null) return;
    
    const isCorrect = character.tone === draggedTone;
    
    setUserAnswers(prev => ({
      ...prev,
      [character.id]: {
        tone: draggedTone,
        isCorrect
      }
    }));
    
    setFeedback(prev => ({
      ...prev,
      [character.id]: {
        type: isCorrect ? 'success' : 'error',
        message: isCorrect ? 'Ï†ïÎãµ!' : `ÌãÄÎ†∏ÏäµÎãàÎã§. Ï†ïÎãµÏùÄ ${TONE_NAMES[character.tone]}ÏûÖÎãàÎã§.`
      }
    }));

    // Ï†êÏàò ÏóÖÎç∞Ïù¥Ìä∏
    setScore(prev => {
      const newCorrect = isCorrect ? prev.correct + 1 : prev.correct;
      const newTotal = prev.total + 1;
      
      // Î™®Îì† Î¨∏Ï†ú ÏôÑÎ£å Ïãú
      if (newTotal === activityData.sentence.characters.length) {
        setTimeout(() => onComplete({ correct: newCorrect, total: newTotal }), 1500);
      }
      
      return { correct: newCorrect, total: newTotal };
    });
    
  }, [draggedTone, activityData, onComplete]);

  const resetActivity = useCallback(() => {
    setUserAnswers({});
    setFeedback({});
    setScore({ correct: 0, total: 0 });
    setStartTime(Date.now());
  }, []);

  return h('div', { className: 'max-w-6xl mx-auto p-6' },
    // Ìó§Îçî
    h('div', { className: 'bg-white rounded-lg shadow-lg p-6 mb-6' },
      h('div', { className: 'flex justify-between items-center mb-4' },
        h('div', { className: 'flex items-center gap-4' },
          h('button', {
            onClick: onBack,
            className: 'px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors'
          }, '‚Üê Îí§Î°ú'),
          h('div', null,
            h('h1', { className: 'text-2xl font-bold text-gray-800' },
              activityData.title
            ),
            h('p', { className: 'text-gray-600' },
              activityData.description
            )
          )
        ),
        h('div', { className: 'flex gap-2' },
          h('button', {
            onClick: () => setIsEditing(!isEditing),
            className: 'px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors'
          }, isEditing ? 'Ìé∏Ïßë ÏôÑÎ£å' : 'ÏÑ§Ï†ï Ìé∏Ïßë'),
          h('button', {
            onClick: resetActivity,
            className: 'px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors'
          }, 'Îã§Ïãú ÏãúÏûë')
        )
      ),
      
      // Ï†êÏàò ÌëúÏãú
      h('div', { className: 'flex justify-center gap-6' },
        h('div', { className: 'text-center p-3 bg-blue-50 rounded-lg' },
          h('div', { className: 'text-2xl font-bold text-blue-600' },
            `${score.correct} / ${activityData.sentence.characters.length}`
          ),
          h('div', { className: 'text-sm text-gray-600' }, 'Ï†ïÎãµ')
        ),
        h('div', { className: 'text-center p-3 bg-green-50 rounded-lg' },
          h('div', { className: 'text-2xl font-bold text-green-600' },
            score.total > 0 ? `${Math.round((score.correct / score.total) * 100)}%` : '0%'
          ),
          h('div', { className: 'text-sm text-gray-600' }, 'Ï†ïÌôïÎèÑ')
        )
      )
    ),

    // ÏÑ§Ï†ï Ìå®ÎÑê
    isEditing && h(ToneSettingsPanel, {
      activityData,
      setActivityData: () => {}, // ÏùΩÍ∏∞ Ï†ÑÏö©ÏúºÎ°ú ÏÑ§Ï†ï
      onClose: () => setIsEditing(false)
    }),

    // ÏÑ±Ï°∞ ÏòµÏÖò Ìå®ÎÑê
    h(ToneOptionsPanel, {
      availableTones,
      userAnswers,
      onDragStart: handleDragStart,
      onDragEnd: handleDragEnd
    }),

    // Î¨∏Ïû• ÌëúÏãú ÏòÅÏó≠
    h(ToneSentenceDisplay, {
      activityData,
      userAnswers,
      feedback,
      onDragOver: handleDragOver,
      onDrop: handleDrop
    })
  );
}

// ÏÑ±Ï°∞ ÏòµÏÖò Ìå®ÎÑê
function ToneOptionsPanel({ availableTones, userAnswers, onDragStart, onDragEnd }) {
  const usedTones = Object.values(userAnswers).map(answer => answer.tone);
  
  return h('div', { className: 'bg-white rounded-lg shadow-lg p-6 mb-6' },
    h('h3', { className: 'text-xl font-bold mb-4 text-gray-800' },
      'üéµ ÏïÑÎûò ÏÑ±Ï°∞Î•º ÎìúÎûòÍ∑∏ÌïòÏó¨ Ìï¥Îãπ Í∏ÄÏûê ÏúÑÏóê Ïò¨Î†§Ï£ºÏÑ∏Ïöî'
    ),
    h('div', { className: 'bg-gradient-to-r from-purple-50 to-pink-50 border-2 border-purple-200 rounded-xl p-6' },
      h('div', { className: 'flex flex-wrap justify-center gap-4' },
        ...availableTones.map((tone, index) => {
          const isUsed = usedTones.includes(tone);
          return h('div', {
            key: `${tone}_${index}`,
            className: `relative px-6 py-4 rounded-xl cursor-grab font-bold transition-all duration-200 select-none text-white ${
              isUsed 
                ? 'opacity-50 cursor-not-allowed scale-95' 
                : `${TONE_COLORS[tone]} hover:scale-110 hover:shadow-lg active:scale-95`
            }`,
            draggable: !isUsed,
            onDragStart: (e) => !isUsed && onDragStart(e, tone),
            onDragEnd,
            style: { minWidth: '60px', textAlign: 'center' }
          }, 
            h('div', { className: 'text-2xl mb-1' }, TONE_MARKS[tone] || '‚óã'),
            h('div', { className: 'text-xs' }, TONE_NAMES[tone]),
            isUsed && h('div', {
              className: 'absolute -top-1 -right-1 w-5 h-5 bg-gray-600 rounded-full flex items-center justify-center text-white text-xs'
            }, '‚úì')
          );
        })
      )
    ),
    h('div', { className: 'mt-4 text-center' },
      h('p', { className: 'text-sm text-gray-500' },
        'üí° ÌåÅ: ÏÑ±Ï°∞ ÎßàÌÅ¨Î•º Í∏ÄÏûê ÏúÑ Ï†êÏÑ† Î∞ïÏä§Ïóê ÎìúÎûòÍ∑∏ÌïòÎ©¥ ÏûêÎèôÏúºÎ°ú Ï†ïÎãµ Ïó¨Î∂ÄÎ•º ÌôïÏù∏Ìï† Ïàò ÏûàÏñ¥Ïöî'
      )
    )
  );
}

// Î¨∏Ïû• ÌëúÏãú Ïª¥Ìè¨ÎÑåÌä∏
function ToneSentenceDisplay({ activityData, userAnswers, feedback, onDragOver, onDrop }) {
  return h('div', { className: 'bg-white rounded-lg shadow-lg p-8 mb-6' },
    h('div', { className: 'text-center mb-6' },
      h('div', { className: 'mb-4 p-4 bg-blue-50 rounded-lg border border-blue-200' },
        h('p', { className: 'text-blue-800 text-lg font-medium' },
          `"${activityData.sentence.meaning}"`
        )
      )
    ),
    
    h('div', { className: 'text-center' },
      h('div', { className: 'inline-block py-8 px-6' },
        h('div', { className: 'flex items-end justify-center gap-3 flex-wrap' },
          ...activityData.sentence.characters.map(character => 
            h(ToneCharacterDropZone, {
              key: character.id,
              character,
              userAnswer: userAnswers[character.id],
              feedback: feedback[character.id],
              settings: activityData.settings,
              onDragOver,
              onDrop
            })
          )
        )
      )
    )
  );
}

// Í∞úÎ≥Ñ Í∏ÄÏûê ÎìúÎ°≠ Ï°¥
function ToneCharacterDropZone({ character, userAnswer, feedback, settings, onDragOver, onDrop }) {
  const getFeedbackClass = () => {
    if (feedback) {
      if (feedback.type === 'success') return 'border-green-400 bg-green-50';
      if (feedback.type === 'error') return 'border-red-400 bg-red-50';
    }
    return 'border-purple-200 bg-purple-50';
  };

  const getToneClass = () => {
    if (feedback) {
      if (feedback.type === 'success') return 'bg-green-100 text-green-700 border-green-300';
      if (feedback.type === 'error') return 'bg-red-100 text-red-700 border-red-300';
    }
    return userAnswer ? `${TONE_COLORS[userAnswer.tone].replace('bg-', 'bg-opacity-20 bg-')} text-white border-purple-300` : 'bg-purple-100 text-purple-700 border-purple-300';
  };

  return h('div', { 
    className: 'relative flex flex-col items-center mb-4'
  },
    // ÏÑ±Ï°∞ ÎìúÎ°≠ ÏòÅÏó≠
    h('div', {
      className: `min-w-16 h-16 border-2 border-dashed rounded-lg flex items-center justify-center mb-2 transition-all duration-300 ${getFeedbackClass()} hover:scale-105 hover:border-solid hover:shadow-md cursor-pointer`,
      onDragOver: (e) => {
        onDragOver(e);
        e.currentTarget.classList.add('scale-110', 'border-purple-400', 'bg-purple-100');
      },
      onDragLeave: (e) => {
        e.currentTarget.classList.remove('scale-110', 'border-purple-400', 'bg-purple-100');
      },
      onDrop: (e) => {
        onDrop(e, character);
        e.currentTarget.classList.remove('scale-110', 'border-purple-400', 'bg-purple-100');
      },
      style: { 
        minHeight: `${Math.max(64, (settings?.pinyinFontSize || 24) + 24)}px`,
        minWidth: `${Math.max(64, (settings?.fontSize || 48) + 16)}px`
      }
    },
      userAnswer ? h('div', {
        className: `font-bold px-3 py-2 rounded-lg text-center shadow-sm transition-all duration-300 ${getToneClass()}`,
        style: { fontSize: `${(settings?.pinyinFontSize || 24) + 8}px` }
      }, 
        h('div', { className: 'text-2xl mb-1' }, TONE_MARKS[userAnswer.tone] || '‚óã'),
        h('div', { className: 'text-xs' }, TONE_NAMES[userAnswer.tone])
      ) : h('div', {
        className: 'text-purple-400 text-xs font-medium opacity-60'
      }, 'ÎìúÎûòÍ∑∏')
    ),
    
    // Ï§ëÍµ≠Ïñ¥ Í∏ÄÏûê
    h('div', {
      className: 'chinese-character font-black text-gray-800 leading-tight select-none',
      style: { 
        fontSize: `${settings?.fontSize || 48}px`,
        lineHeight: '0.9'
      }
    }, character.char)
  );
}

// ÏÑ§Ï†ï Ìå®ÎÑê
function ToneSettingsPanel({ activityData, setActivityData, onClose }) {
  return h('div', { className: 'bg-gray-50 rounded-lg p-6 mb-6' },
    h('div', { className: 'flex justify-between items-center mb-4' },
      h('h3', { className: 'text-xl font-bold text-gray-800' }, 'üõ†Ô∏è Î¨∏Ïû• Ïï°Ìã∞ÎπÑÌã∞ ÏÑ§Ï†ï'),
      h('button', {
        onClick: onClose,
        className: 'px-3 py-1 bg-gray-500 text-white rounded hover:bg-gray-600 transition'
      }, '‚úï')
    ),
    
    h('div', { className: 'grid grid-cols-1 md:grid-cols-4 gap-4 mb-6' },
      h('div', null,
        h('label', { className: 'block text-sm font-medium text-gray-700 mb-2' },
          `ÌïúÏûê Ìè∞Ìä∏ ÌÅ¨Í∏∞: ${activityData.settings.fontSize}px`
        ),
        h('input', {
          type: 'range',
          min: 24, max: 72,
          value: activityData.settings.fontSize,
          className: 'w-full',
          readOnly: true
        })
      ),
      h('div', null,
        h('label', { className: 'block text-sm font-medium text-gray-700 mb-2' },
          `ÏÑ±Ï°∞ Ìè∞Ìä∏ ÌÅ¨Í∏∞: ${activityData.settings.pinyinFontSize}px`
        ),
        h('input', {
          type: 'range',
          min: 12, max: 36,
          value: activityData.settings.pinyinFontSize,
          className: 'w-full',
          readOnly: true
        })
      ),
      h('div', null,
        h('label', { className: 'block text-sm font-medium text-gray-700 mb-2' },
          `Í∞ÑÍ≤©: ${activityData.settings.spacing}px`
        ),
        h('input', {
          type: 'range',
          min: 10, max: 50,
          value: activityData.settings.spacing,
          className: 'w-full',
          readOnly: true
        })
      ),
      h('div', null,
        h('label', { className: 'block text-sm font-medium text-gray-700 mb-2' },
          `Ï†úÌïúÏãúÍ∞Ñ: ${activityData.settings.timeLimit}Ï¥à`
        ),
        h('input', {
          type: 'range',
          min: 0, max: 600,
          value: activityData.settings.timeLimit,
          className: 'w-full',
          readOnly: true
        })
      )
    ),
    
    h('div', { className: 'text-sm text-gray-600 bg-yellow-50 p-3 rounded-lg' },
      h('p', { className: 'mb-1' }, 'üí° ÌòÑÏû¨ ÏÑ§Ï†ï:'),
      h('ul', { className: 'list-disc list-inside space-y-1' },
        h('li', null, `Í∏ÄÏûê ÌÅ¨Í∏∞: ${activityData.settings.fontSize}px`),
        h('li', null, `ÏÑ±Ï°∞ ÌÅ¨Í∏∞: ${activityData.settings.pinyinFontSize}px`),
        h('li', null, `Ï†úÌïúÏãúÍ∞Ñ: ${Math.floor(activityData.settings.timeLimit / 60)}Î∂Ñ ${activityData.settings.timeLimit % 60}Ï¥à`)
      )
    )
  );
}

// Í≤∞Í≥º ÌôîÎ©¥ Ïª¥Ìè¨ÎÑåÌä∏
function ToneActivityResults({ onStartNew }) {
  return h('div', { className: 'max-w-4xl mx-auto p-6' },
    h('div', { className: 'bg-white rounded-xl shadow-lg p-8 text-center' },
      h('div', { className: 'mb-6' },
        h('div', { className: 'text-6xl mb-4' }, 'üéâ'),
        h('h1', { className: 'text-3xl font-bold text-gray-800 mb-2' },
          'ÏÑ±Ï°∞ ÌïôÏäµ ÏôÑÎ£å!'
        ),
        h('p', { className: 'text-xl text-gray-600' },
          'Î™®Îì† ÏÑ±Ï°∞Î•º Ïò¨Î∞îÎ•¥Í≤å Î∞∞ÏπòÌñàÏäµÎãàÎã§!'
        )
      ),
      
      h('button', {
        onClick: onStartNew,
        className: 'px-8 py-4 bg-gradient-to-r from-purple-500 to-pink-600 text-white font-bold text-xl rounded-xl hover:from-purple-600 hover:to-pink-700 transition-all duration-200 shadow-lg hover:shadow-xl'
      }, 'üéµ ÏÉàÎ°úÏö¥ ÌôúÎèô ÏãúÏûëÌïòÍ∏∞')
    )
  );
}

// Ïï± Ï¥àÍ∏∞Ìôî
document.addEventListener('DOMContentLoaded', () => {
  ReactDOM.render(h(ToneActivity), document.getElementById('root'));
});